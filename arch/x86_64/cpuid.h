/****************************************************************************************************************//**
*   @file               cpuid.h
*   @brief              Functions and constants specific to the cpuid opcode
*   @author             Adam Clark (hobbyos@eryjus.com)
*   @date               2022-Mar-04
*   @since              v0.0.1
*
*   @copyright          Copyright (c)  2022 -- Adam Clark\n
*                       Licensed under "THE BEER-WARE LICENSE"\n
*                       See \ref LICENSE.md for details.
*
* ------------------------------------------------------------------------------------------------------------------
*
*   |     Date    | Tracker |  Version | Pgmr | Description
*   |:-----------:|:-------:|:--------:|:----:|:--------------------------------------------------------------------
*   | 2022-Feb-26 | Initial |  v0.0.0  | ADCL | Initial version
*
*///=================================================================================================================



#ifndef __CPUID_H__
#define __CPUID_H__



#ifndef __ARCH_H__
# error "Do not include 'cpuid.h' directly; include 'arch.h' instead"
#endif



/****************************************************************************************************************//**
*   @fn                 void CPUID(int code, uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d)
*   @brief              Use the CPUID instruction to retrieve system capabilities
*
*  CPUID function -- lifted from: https://wiki.osdev.org/CPUID
*  issue a single request to CPUID. Fits 'intel features', for instance note that even if only "eax" and "edx"
*  are of interest, other registers will be modified by the operation, so we need to tell the compiler about it.
*
*   @param              code                Which CPUID code on which to poll capabilities
*   @param              a                   Where to store the contents of the eax register
*   @param              b                   Where to store the contents of the ebx register
*   @param              c                   Where to store the contents of the ecx register
*   @param              d                   Where to store the contents of the edx register
*///-----------------------------------------------------------------------------------------------------------------
INLINE
void CPUID(int code, uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d) {
    __asm volatile("cpuid" : "=a"(*a),"=b"(*b),"=c"(*c),"=d"(*d) : "a"(code) : "memory");
}



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_SSE3
*   @brief              The CPU supports SSE3
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_SSE3         = (1<<0);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_PCLMULQDQ
*   @brief              The CPU supports the PCLMULQDQ instruction
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_PCLMULQDQ    = (1<<1);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_DTES64
*   @brief              The CPU supports 64-bit DS area
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_DTES64       = (1<<2);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_MONITOR
*   @brief              The CPU supports the MONITOR/MWAIT feature
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_MONITOR      = (1<<3);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_DS_CPL
*   @brief              The CPU supports CPL Qualified Debug Store
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_DS_CPL       = (1<<4);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_VMX
*   @brief              The CPU supports Virtual Machine Extensions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_VMX          = (1<<5);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_SMX
*   @brief              The CPU supports Safer Mode Extensions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_SMX          = (1<<6);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_EIST
*   @brief              The CPU supports Enhanced Intel Speedstep Technology
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_EIST         = (1<<7);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_TM2
*   @brief              The CPU supports Thermal Monitor 2 technology
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_TM2          = (1<<8);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_SSSE3
*   @brief              The CPU supports Supplemental Streaming SIMD Extensions 3 (SSSE3) technology
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_SSSE3        = (1<<9);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_CNTX_ID
*   @brief              The L1 data cache mode can be set to either adaptive or shared mode (L1 Context ID)
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_CNTX_ID      = (1<<10);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_SDBG
*   @brief              The CPU supports the IA32_DEBUG_INTERFACE MSR for silicon debugging
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_SDBG         = (1<<11);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_FMA
*   @brief              The CPU supports the FMA Extensions using the YMM state
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_FMA          = (1<<12);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_CMPXCHG16B
*   @brief              The CPU supports the CMPXCHG8BCMPXCHG16B instructions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_CMPXCHG16B   = (1<<13);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_XTPR_UPD_CTL
*   @brief              The CPU supports xTPR Update Control (IA32_MISC_ENABLE MSR; bit 23)
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_XTPR_UPD_CTL = (1<<14);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_PDCM
*   @brief              The CPU supports Perfmon and Debug Capability (MSR IA32_PERF_CAPABILITIES)
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_PDCM         = (1<<15);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_PCID
*   @brief              The CPU supports Process Context Identifiers (CR4.PCIDE can be set to 1)
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_PCID         = (1<<17);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_DCA
*   @brief              The CPU can prefetch data from memory mapped devices
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_DCA          = (1<<18);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_SSE4_1
*   @brief              The CPU supports SSE4.1
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_SSE4_1       = (1<<19);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_SSE4_2
*   @brief              The CPU supports SSE4.2
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_SSE4_2       = (1<<20);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_X2APIC
*   @brief              The CPU supports x2APIC feature
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_X2APIC       = (1<<21);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_MOVBE
*   @brief              The CPU supports the MOVBE instruction
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_MOVBE        = (1<<22);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_POPCNT
*   @brief              The CPU supports the POPCNT instruction
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_POPCNT       = (1<<23);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_TSC_DEADLINE
*   @brief              The Local APIC supports one-shot operation using a TSC deadline
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_TSC_DEADLINE = (1<<24);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_AESNI
*   @brief              The CPU supports AESNI instruction extensions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_AESNI        = (1<<25);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_XSAVE
*   @brief              The CPU supports XSAVE/XRESTOR extended states feature, XSETBV/XGETBV instructions and XCR0
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_XSAVE        = (1<<26);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_OSXSAVE
*   @brief              OS has set CR4.OSXSAVE [bit 18] to enable CPUID_FEAT_ECX_XSAVE features
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_OSXSAVE      = (1<<27);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_AVX
*   @brief              The CPU supports the AVX instructions extensions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_AVX          = (1<<28);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_F16C
*   @brief              The CPU supports 16-bit floating-point conversion instructions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_F16C         = (1<<29);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_ECX_RDRAND
*   @brief              The CPU supports the RDRAND instruction
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_ECX_RDRAND       = (1<<30);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_FPU
*   @brief              The CPU contains a Floating Point Unit on-chip
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_FPU          = (1<<0);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_VME
*   @brief              The CPU supports Virtual 8086 Mode Enhancements
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_VME          = (1<<1);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_DE
*   @brief              The CPU supports Debugging Extensions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_DE           = (1<<2);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PSE
*   @brief              The CPU supports Page Size Extensions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PSE          = (1<<3);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_TSC
*   @brief              The CPU supports the RDTSC instruction, including the CR4.TSD for privilege
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_TSC          = (1<<4);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_MSR
*   @brief              The CPU supports the RDMSR/WRMSR instructions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_MSR          = (1<<5);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PAE
*   @brief              The CPU supports Physical Address Extension
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PAE          = (1<<6);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_MCE
*   @brief              The CPU supports Machine Check Excpetion
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_MCE          = (1<<7);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_CX8
*   @brief              The CPU supports CMPXCHG8B Instruction
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_CX8          = (1<<8);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_APIC
*   @brief              The CPU contains an APIC
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_APIC         = (1<<9);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_SEP
*   @brief              The CPU supports SYSENTER/SYSEXIT instructions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_SEP          = (1<<11);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_MTRR
*   @brief              The CPU supports Memory Type Range Registers
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_MTRR         = (1<<12);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PGE
*   @brief              The CPU supports Page Global Bit
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PGE          = (1<<13);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_MCA
*   @brief              The CPU supports Machine Check Architecture
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_MCA          = (1<<14);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_CMOV
*   @brief              The CPU supports Conditional Move Instructions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_CMOV         = (1<<15);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PAT
*   @brief              The CPU supports Page Attribute Table
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PAT          = (1<<16);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PSE36
*   @brief              The CPU supports 36-Bit Page Size Extension
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PSE36        = (1<<17);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PSN
*   @brief              The CPU supports Processor Serial Number
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PSN          = (1<<18);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_CLFSH
*   @brief              The CPU supports the CLFLUSH instruction
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_CLFSH        = (1<<19);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_DS
*   @brief              The CPU supports Debug Store
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_DS           = (1<<21);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_ACPI
*   @brief              The CPU supports Thermal Monitor and Software Controlled Clock Facilities
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_ACPI         = (1<<22);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_MMX
*   @brief              The CPU supports Multimedia Extensions (MMX) Technology
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_MMX          = (1<<23);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_FXSR
*   @brief              The CPU supports FXSAVE/FXRESTOR instructions
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_FXSR         = (1<<24);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_SSE
*   @brief              The CPU supports SSE
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_SSE          = (1<<25);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_SSE2
*   @brief              The CPU supports SSE2
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_SSE2         = (1<<26);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_SS
*   @brief              The CPU supports Self Snoop
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_SS           = (1<<27);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_HTT
*   @brief              The Max APIC IDs reserved field is valid
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_HTT          = (1<<28);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_TM
*   @brief              The CPU supports Thermal Monitor
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_TM           = (1<<29);



/****************************************************************************************************************//**
*   @var                CPUID_FEAT_EDX_PBE
*   @brief              The CPU supports Pending Break Enable
*///-----------------------------------------------------------------------------------------------------------------
const uint64_t CPUID_FEAT_EDX_PBE          = (1<<31);


#endif

